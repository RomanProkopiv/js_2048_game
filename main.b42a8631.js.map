{"version":3,"sources":["scripts/main.js"],"names":["mainButton","document","querySelector","body","gameScore","tableMain","tableRows","querySelectorAll","messageStart","messageLose","messageWin","tableCell","tableValue","maxColums","maxRows","finishGame","score","swap","events","key","arrowRight","arrowleft","arrowUp","arrowDown","screenEcho","game","clearScreen","newCell","addEventListener","i","rowArr","workArr","j","push","cellShift","rowNew","k","rowArr1","lastCellWithValue","lastCellWithAdd","undefined","shift","className","classList","lastFree","index","cellArr","rand","randomInteger","length","checkPossibilityOfMovement","coord","rowArray","min","max","Math","random","round","textContent","rowArr2","forEach","tableRow","cells","cell","rowCurrent","rowNext","hidden","classButton","split","join","removeEventListener"],"mappings":"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","file":"main.b42a8631.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst mainButton = document.querySelector('button');\nconst body = document.body;\nconst gameScore = body.querySelector('.game-score');\nconst tableMain = body.querySelector('table');\nconst tableRows = tableMain.querySelectorAll('tr');\nconst messageStart = body.querySelector('.message-start');\nconst messageLose = body.querySelector('.message-lose');\nconst messageWin = body.querySelector('.message-win');\nconst tableCell = [];\nconst tableValue = [];\nconst maxColums = 3;\nconst maxRows = 3;\nlet finishGame = false;\nlet score = 0;\n\nconst swap = (events) => {\n  if (!finishGame) {\n    switch (events.key) {\n      case 'ArrowRight':\n        arrowRight();\n        break;\n\n      case 'ArrowLeft':\n        arrowleft();\n        break;\n\n      case 'ArrowUp':\n        arrowUp();\n        break;\n\n      case 'ArrowDown':\n        arrowDown();\n        break;\n    };\n    screenEcho();\n  };\n};\n\nmainButton.addEventListener('click', () => {\n  messageStart.hidden = true;\n\n  if (mainButton.classList[1] === 'start') {\n    const classButton = mainButton.className.split(' ');\n\n    classButton[1] = 'restart';\n    mainButton.className = classButton.join(' ');\n    mainButton.textContent = 'Restart';\n\n    game();\n  } else {\n    clearScreen();\n    body.removeEventListener('keydown', swap);\n    finishGame = false;\n    messageLose.className = 'message message-lose hidden';\n    messageWin.className = 'message message-win hidden';\n    game();\n  };\n});\n\nfunction game() {\n  clearScreen();\n  newCell();\n  newCell();\n\n  screenEcho();\n\n  if (!finishGame) {\n    body.addEventListener('keydown', swap);\n  };\n}\n\nfunction arrowRight() {\n  for (let i = 0; i <= maxRows; i++) {\n    const rowArr = tableValue[i];\n    const workArr = [];\n\n    for (let j = maxColums; j >= 0; j--) {\n      workArr.push(rowArr[j]);\n    };\n\n    cellShift(workArr);\n\n    const rowNew = [];\n\n    for (let j = maxColums; j >= 0; j--) {\n      rowNew.push(workArr[j]);\n    };\n\n    tableValue[i] = rowNew;\n  };\n  newCell();\n};\n\nfunction arrowleft() {\n  for (let i = 0; i <= maxRows; i++) {\n    const rowArr = tableValue[i];\n\n    cellShift(rowArr);\n  };\n  newCell();\n};\n\nfunction arrowUp() {\n  for (let i = 0; i <= maxColums; i++) {\n    const workArr = [];\n\n    for (let j = 0; j <= maxRows; j++) {\n      const rowArr = tableValue[j];\n\n      workArr.push(rowArr[i]);\n    };\n    cellShift(workArr);\n\n    for (let j = 0; j <= maxRows; j++) {\n      const rowArr = tableValue[j];\n\n      rowArr[i] = workArr[j];\n      tableValue[j] = rowArr;\n    };\n  };\n  newCell();\n};\n\nfunction arrowDown() {\n  for (let i = 0; i <= maxColums; i++) {\n    const workArr = [];\n\n    for (let j = maxRows; j >= 0; j--) {\n      const rowArr = tableValue[j];\n\n      workArr.push(rowArr[i]);\n    };\n    cellShift(workArr);\n\n    let k = 0;\n\n    for (let j = maxRows; j >= 0; j--) {\n      const rowArr1 = tableValue[j];\n\n      rowArr1[i] = workArr[k];\n      tableValue[j] = rowArr1;\n      k++;\n    };\n  };\n  newCell();\n};\n\nfunction cellShift(rowArr) {\n  let lastCellWithValue;\n  let lastCellWithAdd;\n\n  if (rowArr[0] !== 0) {\n    lastCellWithValue = 0;\n  };\n\n  for (let i = 1; i <= maxColums; i++) {\n    if (rowArr[i] !== 0) {\n      if (lastCellWithValue === undefined) {\n        shift(rowArr, 0, i);\n        lastCellWithValue = 0;\n        continue;\n      };\n\n      if (rowArr[i] === rowArr[lastCellWithValue]\n        && lastCellWithValue !== lastCellWithAdd) {\n        rowArr[i] = rowArr[i] * 2;\n\n        score += rowArr[i];\n        shift(rowArr, lastCellWithValue, i);\n        lastCellWithAdd = lastCellWithValue;\n\n        if (+rowArr[lastCellWithAdd] === 2048) {\n          finishGame = true;\n          messageWin.className = messageLose.classList[0];\n\n          return;\n        };\n        continue;\n      };\n\n      lastCellWithValue++;\n\n      if (rowArr[i] !== rowArr[lastCellWithValue]) {\n        shift(rowArr, lastCellWithValue, i);\n      }\n    };\n  };\n  screenEcho();\n};\n\nfunction shift(rowArr, lastFree, index) {\n  rowArr[lastFree] = rowArr[index];\n  rowArr[index] = 0;\n};\n\nfunction newCell() {\n  if (!finishGame) {\n    const cellArr = [];\n    const rand = (randomInteger(1, 10) < 10) ? 2 : 4;\n\n    for (let j = 0; j <= maxRows; j++) {\n      const rowArr = tableValue[j];\n\n      for (let i = 0; i <= maxColums; i++) {\n        if (rowArr[i] === 0) {\n          cellArr.push([j, i]);\n        };\n      };\n    };\n\n    if (cellArr.length === 0) {\n      finishGame = checkPossibilityOfMovement();\n\n      if (finishGame) {\n        messageLose.className = messageLose.classList[0];\n\n        return;\n      }\n    };\n\n    const index = randomInteger(0, cellArr.length - 1);\n\n    const coord = cellArr[index];\n    const rowArray = tableValue[coord[0]];\n\n    rowArray[coord[1]] = rand;\n    tableValue[coord[0]] = rowArray;\n  };\n  screenEcho();\n};\n\nfunction randomInteger(min, max) {\n  const rand = min - 0.5 + Math.random() * (max - min + 1);\n\n  return Math.round(rand);\n}\n\nfunction screenEcho() {\n  gameScore.textContent = score;\n\n  for (let j = 0; j <= maxRows; j++) {\n    const rowArr = tableCell[j];\n    const rowArr2 = tableValue[j];\n\n    for (let i = 0; i <= maxColums; i++) {\n      if (rowArr2[i] === 0) {\n        rowArr[i].textContent = '';\n        rowArr[i].className = 'field-cell';\n      } else {\n        rowArr[i].textContent = rowArr2[i];\n        rowArr[i].className = `field-cell field-cell--${rowArr2[i]}`;\n      };\n    };\n  };\n};\n\nfunction clearScreen() {\n  tableCell.length = 0;\n  tableValue.length = 0;\n  score = 0;\n\n  tableRows.forEach((tableRow) => {\n    const rowArr = [];\n    const rowArr2 = [];\n\n    for (const cell of tableRow.cells) {\n      rowArr.push(cell);\n      rowArr2.push(0);\n    };\n    tableCell.push(rowArr);\n    tableValue.push(rowArr2);\n  });\n};\n\nfunction checkPossibilityOfMovement() {\n  for (let i = 0; i <= maxRows; i++) {\n    const rowCurrent = tableValue[i];\n    const rowNext = (i < maxRows) ? tableValue[i + 1]\n      : [0, 0, 0, 0];\n\n    rowCurrent.push(0);\n\n    for (let j = 0; j <= maxColums; j++) {\n      if (rowCurrent[j] === rowCurrent[j + 1]) {\n        return false;\n      };\n\n      if (rowCurrent[j] === rowNext[j]) {\n        return false;\n      };\n    };\n  };\n\n  return true;\n};\n"]}